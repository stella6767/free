# nginx.conf 파일
# 컨테이너 내부에 /etc/nginx/conf.d/nginx.conf 경로에 존재

user  nginx;

# user  ubuntu;

worker_processes auto; #CPU의 갯수를 알아서 파악

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;  #최대 worker_processes * worker_connections의 갯수로 처리할 수 있다.
}


http {

    client_max_body_size 500M; #요청 바디 500MB로 제한
    gzip on; #응답 압축
    gzip_disable "msie6"; #IE6 지원 안함
    gzip_min_length 500; #최소 사이즈를 지정하며 이보다 작은 파일은 압축하지 않음
    gzip_buffers 16 8k; #버퍼의 숫자와 크기를 지정
    gzip_comp_level 6; #압축 레벨 6
    gzip_proxied any; #항상 압축함 https://www.lesstif.com/system-admin/nginx-gzip-59343019.html
    gzip_types application/json; #컨텐츠의 유형에 따라 압축 여부를 설정
    server_tokens off; #서버 정보를 노출하지 않음 (취약점 방지하기 위해)


    #로드밸런싱으로 AWS private ip 대신 클라이언트의 ip를 가져올 수 있도록 함
#     set_real_ip_from 172.31.0.0/16;
#     real_ip_header X-Forwarded-For;

    log_format main '$http_x_forwarded_for $time_local $request_method $status $body_bytes_sent '
    '"$http_referer" "$http_user_agent" $request_uri $request_id $request_time "$host"';

#     map $http_user_agent $loggable {
#       default 1;
#       "ELB-HealthChecker/2.0" 0; #ELB health check의 경우 로깅하지 않음
#     }

    # official docs : https://www.nginx.com/blog/rate-limiting-nginx/
    # ip는 binary 저장이 제일 공간적으로 효율적임
    # zone={zoneName}:{zoneSize;1m(160,000)}
    # (burst 지시자가 없는 경우) 10r/s의 의미는 초당10개를 허용한다는 의미지만 더 정확하게는 이전 요청보다 100ms 낮을 수 없다.
    limit_req_zone $binary_remote_addr zone=accountZone:50m rate=20r/s;




    server {
        listen 80;
        listen [::]:80;

        server_name www.freeapp.me;

        location /.well-known/acme-challenge/ {
             allow all;
             root /var/www/certbot;
        }

       location / {
            return 301 https://$host$request_uri;
        }
    }


    server {
        charset utf-8;
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name www.freeapp.me;
        keepalive_timeout 65;

        #burst 와 noddelay를 적절히 섞어야 함
#         limit_req zone=accountZone burst=10 nodelay;
#         limit_req_status 429; #too many request 에러

        # 일반적으로 많이 사용되는 취약점 스캐너, 공격 TOOL에서 사용하는 USER-AGENT이다.
        if ($http_user_agent ~* "Paros|ZmEu|nikto|dirbuster|sqlmap|openvas|w3af|Morfeus|JCE|Zollard|Arachni|Brutus|bsqlbf|Grendel-Scan|Havij|Hydra|N-Stealth|Netsparker|Pangolin|pmafind|webinspect") {
            return 444;
        }

        # ELB-Health-Checker 경우 어플리케이션에 접근하지 않고 바로 nginx 에서 200으로 리턴
#         if ($http_user_agent ~* '^ELB-HealthChecker\/.*$') {
#             return 200;
#         }

#     access_log /dev/stdout main if=$loggable; #ELB Health-Checker 로깅하지 않음
#     error_log /dev/stderr;

#         인증서 등록 필요
        ssl_certificate /etc/letsencrypt/live/www.freeapp.me/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/www.freeapp.me/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;


        location / {
            proxy_pass  http://web:8081;
            proxy_redirect  off;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header        Host               $host;
            proxy_set_header        X-Real-IP          $remote_addr;
            proxy_set_header        X-Forwarded-For    $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Host   $host:443;
            proxy_set_header        X-Forwarded-Server $host;
            proxy_set_header        X-Forwarded-Port   443;
            proxy_set_header        X-Forwarded-Proto  https;
        }

        # .php, .jsp, .js .xml 등의 파일 확장자로 접근하는 애들을 무시한다.
        # email 확장자를 체크하는 v1/sign-up/email/myway__naver.com 중에서 .com이 파일 확장자라고 인식하여 영향을 줌
        # 따라서 윗 부분에서 명시적으로 위치 선정이 필요함
#         location ~ \.[^\.]+$ {
#             access_log off;
#             deny all;
#         }


        location ~ /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }


    }

}
